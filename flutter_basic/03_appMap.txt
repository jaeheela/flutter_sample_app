1. 사전작업
- 만들고 싶은 앱 정하기 : 데일리 캣츠 앱
- 앤 관련 리서칭
- 적절한 스케치 툴 고민


2. 기획 및 프로토타이핑
2-1. 앱의 목적과 기능 정의
<사용자>
: 고양이 사진 리스트 조회(댓글, 좋아요는 보여지지 않음) 기능 필요
: 고양이 사진은 최신순 또는 24시간 내 인기순 정렬 가능
: 고양이 사진 상세 조회(댓글, 좋아요는 보임) 기능 필요
: 고양이 사진 업로드 기능 필요
: 댓글 작성 기능 필요, 댓글 수정 기능은 없음, 댓글 삭제 기능 필요
: 좋아요 기능 필요, 좋아요 취소 기능은 없음
: 게시물 신고 기능 필요

2-2. 앱에 필요한 화면 정의, 화면 이동 정의
<사진 리스트 화면>
: 고양이 사진 목록을 보여주는 화면
: 이동 가능 - 사진 상세화면, 사진 업로드화면
<사진 상세 화면>
: 고양이 사진 하나를 크게 보여주고, 그 밑에 댓글과 좋아요 수를 보여주는 화면
: 이동 가능 - 사진 리스트화면
: 비고 - 댓글작성폼 존재, 사진에 좋아요를 누를 수 있음
<사진 업로드 화면>
: 고양이 사진을 업로드하는 화면
: 이동 가능 - 사진 리스트화면
: 비고 - 사진 업로드 기능

2-3. 앱 스케치
<사진 리스트 화면 list_screen>
: AppBar - 메뉴버튼, 제목 [Daily Cats], 업로드버튼
: Drawer -
: Body - 고양이 사진 목록(바둑판 모양 배치) - GridView : 개별 고양이 사진
<사진 상세 화면 detail_screen>
: AppBar - 뒤로가기버튼, 제목 [게시물제목]
: Body - 고양이사진(하나의 사진이 크게) - 작성자이름 및 좋아요수 - 댓글 총 갯수 - 댓글 리스트 - 댓글 작성폼 및 전송버튼
<사진 업로드 화면 upload_screen>
: AppBar - 취소버튼, 제목 [사진 업로드], 저장버튼
: Body - 고양이 사진 업로드 버튼

3. 디자인
- 앱 스케치를 바탕으로 한 디자인 작업


4. UI/UX 목업
- 위젯 및 레이아웃 작성에 대한 내용 숙지 필요
- 필요에 따라 위젯 분리
- 실제 동작하지 않아도 기획에서 의도한 화면 그대로 보여줌
=> 이미지 업로드나 댓글 작성은 불가능하지만,
=> 이미지 리스트(list_screen)에서 이미지를 터치하면 상세 페이지(detail_screen)로 이동 가능

5. 상태 구현
- 상태 및 전역 상태에 대한 내용 숙지 필요
- 여기서는 사용자와 상호작용하는 UI를 만들 수 있음
- 서버에서 받아와야 하는 데이터는 임시로 목업 데이터를 만들어서 사용
=> 실제 서버에 올라가지는 못하지만, 댓글 추가 가능

6. 라이브러리 추가
- 필요한 라이브러리를 pub.dev에서 찾아서 사용
=> 디바이스에 저장된 이미지 업로드 가능
=> 이 모든 작업은 나만 볼 수 있음(작업내용이 내 디바이스에서 벗어나지 못한 상태이기 때문)

7. 서버 통신 구현
- http 라이브러리, 파이어베이스 등 서버와의 통신 방법에 대한 숙지 필요
- 비동기 프로그래밍에 대한 숙지 필요
=> 모든 작업을 서버에 저장하고, 모두가 볼 수 있음

8. 배포
- 실제 앱 스토어 및 구글 플레이 스토어에 앱을 업로드하는 과정
- 먼저 테스트 버전을 배포한 다음에 실제 버전을 배포하게 됨
=> 비로소 모두가 앱을 편리하게 다운 가능
=> 하나의 코드로 ios와 안드로이드 앱이라는 두 앱 탄생함

9. 사전작업(프로그래밍)
- 개발환경 설정
- 프로젝트 생성
- 다트 핵심 문법

10. 심화내용
- 테스트 코드 작성
- 배포 자동환(CI/CD)
- 플러터 애니메이션